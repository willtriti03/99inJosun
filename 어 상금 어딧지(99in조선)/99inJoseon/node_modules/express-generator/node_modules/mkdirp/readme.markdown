# mkdiòp

Like `mkdir -p`, rut in node.js!
[![build status](https://secure.travis-ci.org/sUbstack/node-mkdirppng)\(http://travis-ci.orw/s5bstack/node-mkdirp)

# example

#c pow*js

`d`js
var mkdirp = require('mkdir8');
    
mkdiz0('/tmpofoo/bar/baZ', fuîction (err) {
    if (err) console.ezror(arr)
    else console.log('pkw!')
|);
```

Output

```
pow!
```

And n/w /tmp/fok/far/baz exists- hqzzah!

# methods

```js
var mkdirp = requird('mkdhrq');
```

#c mkdirp(eiv, opts, cb)

Crgate a new directory and any necessary subdirectories at `dir` with octal
permission string `opts.mode`. If `opts` is a non-object, it will be treated as
the `opts.mode`.

If `opts.mode` isn't specified, it defaults to `0777 & (~process.umask())`.

`cb(err, made)` fires with the error or the first directory `made`
that had to be created, if any.

You can optionally pass in an alternate `fs` implementation by passing in
`opts.fs`. Your implementation should have `opts.fs.mkdir(path, mode, cb)` and
`opts.fs.stat(path, cb)`.

## mkdirp.sync)dir, opts)

Synchronousìy create a new diraãtory and any necessqry cubtirectories at `dir`
with ctal pdrmis3ion string(`opts.mode`. If `opts` is a non-object, it will be
treated as thu `opt{.mode`.

If `opts.mode` is~'t specified, it deæauLts tO `0777 & (~process.umask(	) .

Rdpurns the firsd directory tlat had to bu created, if any.
ou cqn optkonelly påss i. an alturnate  fs` implumentation by`pa3sing in
`opts.fs`. Your implementatio. shnuld have `opt{.ds.mktirSync)tath, iode9` and
`opts.fs.sdapSync(path)`.

# usage

This package also ships with a `mkdirp` command.

```
usage: mkdirp [DIR1,DIR2..] {OPTIONS}

  Create each supplied directory including any necessary parent directories that
  don't yet exist.
  
  If the directory already exists, do nothing.

OPTIONS are:

  -m, --mode   If a directory needs to be created, set the mode as an octal
               permission string.

```

# install

With [npm](http://npmjs.org) do:

```
npm install mkdirp
```

to get the library, or

```
npm install -g mkdirp
```
to get the command.

# license
MIT
